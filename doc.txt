Instalar Passport
	composer require laravel/passport

Crear modelo y migración para Roles
	php artisan make:model -m Roles

Migración de Roles
	public function up()
	{
  		Schema::create('roles', function (Blueprint $table) {
			$table->primary(['user_id', 'role']);
        			$table->integer('user_id')->unsigned();
        			$table->string('role');
    		});
	}

Modelo de User
	public function role() {
    		return $this->hasOne(Role::class);
	}

Crear semilla para usuario admin
	public function run()
	{
 	 	// \App\Models\User::factory(10)->create();

        		DB::table('users')->insert([
            		'name' => 'Admin',
            		'email' => 'admin@admin.com',
            		'password' => bcrypt('admin')
        		]);

        		DB::table('roles')->insert([
            		'user_id' => 1,
            		'role' => 'admin'
        		]);
    	}

Aplicamos migración para crear las tablas de Passport y la tabla de Roles con el modificador --seed para generar el usuario admin
	php artisan migrate --seed

Generar claves de Passport
    php artisan passport:install

Crear middleware para chequear el role
    php artisan make:middleware CheckRole

        public function handle($request, Closure $next)
        {
            $userRole = $request->user()->role()->first();
            if ($userRole) {
                $request->request->add([
                    'scope' => $userRole->role
                ]);
            }

            return $next($request);
        }
    }

Agregar middlewares en Kernel.php
    protected $routeMiddleware = [
        .
        .
        .
        'scopes' => \Laravel\Passport\Http\Middleware\CheckScopes::class,
        'scope' => \Laravel\Passport\Http\Middleware\CheckForAnyScope::class,
        'role' => \App\Http\Middleware\CheckRole::class,
    ];

Definir scopes en AuthServiceProvider.php
    public function boot()
    {
        $this->registerPolicies();

        Passport::routes();

        // Mandatory to define Scope
        Passport::tokensCan([
            'admin' => 'Admin Users',
            'basic' => 'Basic Users'
        ]);

        Passport::setDefaultScope([
            'basic'
        ]);
    }

Crear AuthController
    php artisan make:controller AuthController

    <?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{
    public function signUp(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string',
            'email' => 'required|string|email|unique:users',
            'password' => 'required|string'
        ]);

        if ($validator->fails()) {
            response()->json([
                'created' => false,
                'errors' => $validator->errors()->all()
            ], 400);
        }

        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password)
        ]);

        return response()->json(['message' => 'Successfully created user!'], 201);
    }

       public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|string|email',
            'password' => 'required|string'
        ]);

        if ($validator->fails()) {
            response()->json([
                'created' => false,
                'errors'  => $validator->errors()->all()
            ], 400);
        }

        $credentials = request(['email', 'password']);

        if (!Auth::attempt($credentials))
            return response()->json(['message' => 'Unauthorized'], 401);

        $user = $request->user();
        $userRole = $user->role()->first();

        if ($userRole) {
            $this->scope = $userRole->role;
        }

        $tokenResult = $user->createToken($user->email.' - '.now(), [$this->scope]);

        return response()->json([
            'access_token' => $tokenResult->accessToken,
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->token()->revoke();

        return response()->json([
            'message' => 'Successfully logged out'
        ]);
    }
}

Agregar middlewares a las rutas o a los controladores
    Rutas:
        Route::post('prueba', 'PruebaController@store')->middleware(['auth:api', 'scope:admin']);

    En el constructor del controlador:
        public function __construct()
        {
            $this->middleware(
                [
                    'auth:api', 
                    'scopes:edit,create,delete'
                ])->except(
                    [
                        'index', 'show'
                    ]
                );
        }
